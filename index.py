from flask import Flask, jsonify, render_template_string, request, redirect, session, make_response
import requests
import json
import os
from zeep import Client
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.executors.pool import ThreadPoolExecutor
from flask_cors import CORS
from flask_session import Session
import time
import csv
from datetime import datetime
from flask import send_file
import redis

CSV_DIR = "./csv_reports"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è CSV-—Ñ–∞–π–ª–æ–≤
os.makedirs(CSV_DIR, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

# üîπ PowerBody API (SOAP)


USERNAME = os.getenv('USERNAME')
PASSWORD = os.getenv('PASSWORD')
WSDL_URL = os.getenv('URL')


app = Flask(__name__)
CORS(app)
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT"))
REDIS_USERNAME = os.getenv("REDIS_USERNAME")
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis Cloud
redis_client = redis.StrictRedis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    username=REDIS_USERNAME,
    password=REDIS_PASSWORD,
    decode_responses=True
)

# üîπ Shopify API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SHOPIFY_CLIENT_ID = os.getenv('CLIENT_ID')
SHOPIFY_API_SECRET = os.getenv('API_SECRET')
SHOPIFY_SCOPES = "read_products,write_products,write_inventory"
APP_URL = os.getenv('APP_URL')  # ‚ö†Ô∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π URL –æ—Ç ngrok
REDIRECT_URI = f"{APP_URL}/auth/callback"



app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", os.urandom(24).hex())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .env –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
app.config["SESSION_TYPE"] = "redis"
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_USE_SIGNER"] = True
app.config["SESSION_KEY_PREFIX"] = "session:"
app.config["SESSION_REDIS"] = redis.StrictRedis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    username=REDIS_USERNAME,
    password=REDIS_PASSWORD,
    decode_responses=True
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
Session(app)

SETTINGS_FILE = "settings.json"

# üîπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
executors = {'default': ThreadPoolExecutor(max_workers=10)}
scheduler = BackgroundScheduler(executors=executors)
scheduler.start()

@app.before_request
def log_request():
    print(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url} | IP: {request.remote_addr}")


def save_token(shop, access_token):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Redis Cloud —Å TTL"""
    token_key = f"shopify_token:{shop}"
    redis_client.set(token_key, access_token, ex=2592000)  # 30 –¥–Ω–µ–π TTL

    stored_token = redis_client.get(token_key)
    ttl = redis_client.ttl(token_key)

    if stored_token:
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis: {shop} ‚Üí {stored_token[:8]}*** (TTL: {ttl} —Å–µ–∫)")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –ù–ï —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis!")


@app.route("/test_redis")
def test_redis():
    redis_client.set("foo", "bar")
    value = redis_client.get("foo")
    return f"Redis Cloud —Ä–∞–±–æ—Ç–∞–µ—Ç! foo = {value}"

def get_token(shop):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ Redis"""
    token_key = f"shopify_token:{shop}"
    token = redis_client.get(token_key)
    ttl = redis_client.ttl(token_key)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL

    if token:
        if ttl == -1:  # –ï—Å–ª–∏ —É —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç TTL, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            redis_client.expire(token_key, 2592000)  # 30 –¥–Ω–µ–π
            print(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω TTL —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {shop} (30 –¥–Ω–µ–π)")

        print(f"üì• –¢–æ–∫–µ–Ω –∏–∑ Redis –¥–ª—è {shop}: {token[:8]}*** (TTL: {ttl} —Å–µ–∫)")
        return token
    else:
        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis –¥–ª—è {shop} (TTL: {ttl} —Å–µ–∫)")
        return None



@app.route("/")
def home():
    shop = request.args.get("shop") or request.cookies.get("shop")
    print(f"üõí –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ / —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º shop: {shop}")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    if not shop:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'shop'. –ó–∞–ø—Ä–æ—Å:", request.args, request.cookies)
        return "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'shop'.", 400

    access_token = get_token(shop)
    print(f"üîë –¢–æ–∫–µ–Ω –¥–ª—è {shop}: {access_token}")

    if not access_token:
        print(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /install?shop={shop}")
        return redirect(f"/install?shop={shop}")

    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /admin?shop={shop}")
    return redirect(f"/admin?shop={shop}")

@app.route("/install")
def install_app():
    shop = request.args.get("shop")
    print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è: {shop}")

    if not shop:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'shop' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω Shopify", 400

    if redis_client.ping():
        session["shop"] = shop
    else:
        print("‚ö†Ô∏è Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Å—Å–∏–∏.")
    authorization_url = (
        f"https://{shop}/admin/oauth/authorize"
        f"?client_id={SHOPIFY_CLIENT_ID}"
        f"&scope={SHOPIFY_SCOPES}"
        f"&redirect_uri={REDIRECT_URI}"
    )

    print(f"üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Shopify OAuth: {authorization_url}")
    return redirect(authorization_url)


@app.route("/auth/callback")
def auth_callback():
    shop = request.args.get("shop")
    code = request.args.get("code")

    print(f"üìû –í—ã–∑–≤–∞–Ω `auth_callback`")
    print(f"üîç –ü–æ–ª—É—á–µ–Ω shop: {shop}")
    print(f"üîç –ü–æ–ª—É—á–µ–Ω code: {code}")

    if not code or not shop:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç `code` –∏–ª–∏ `shop` –≤ `auth_callback`.")
        return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç `code` –∏–ª–∏ `shop`", 400

    token_url = f"https://{shop}/admin/oauth/access_token"
    data = {
        "client_id": SHOPIFY_CLIENT_ID,
        "client_secret": SHOPIFY_API_SECRET,
        "code": code
    }

    print(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {token_url} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")

    response = requests.post(token_url, json=data)

    print(f"üì¶ –û—Ç–≤–µ—Ç Shopify: {response.status_code} | {response.text}")

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! Shopify –≤–µ—Ä–Ω—É–ª {response.status_code} | {response.text}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", 400

    try:
        json_response = response.json()
        access_token = json_response.get("access_token")
        if not access_token:
            print("‚ùå –û—à–∏–±–∫–∞: `access_token` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ Shopify!")
            return f"‚ùå –û—à–∏–±–∫–∞: `access_token` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Shopify: {json_response}", 400

        print(f"‚úÖ Shopify –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω: {access_token[:8]}***")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redis
        save_token(shop, access_token)

        response = make_response(redirect(f"/admin?shop={shop}"))
        response.set_cookie("shop", shop, httponly=True, samesite="None", secure=True)

        if redis_client.ping():
            start_sync_for_shop(shop, access_token)
        else:
            print("‚ö†Ô∏è Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞ Shopify: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞ Shopify: {str(e)}", 400




@app.route("/admin")
def admin():
    """–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Shopify Admin"""
    shop = request.args.get("shop") or request.cookies.get("shop")
    access_token = get_token(shop)

    if not shop or not access_token:
        print(f"‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–ª—è {shop} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.")
        return redirect(f"/install?shop={shop}")

    settings = load_settings()

    return render_template_string(f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Shopify Embedded App</title>
        <script src="https://unpkg.com/@shopify/app-bridge"></script>
        <script src="https://unpkg.com/@shopify/app-bridge-utils"></script>
        <script>
            var AppBridge = window["app-bridge"];
            var createApp = AppBridge.createApp;
            var actions = AppBridge.actions;
            var Redirect = actions.Redirect;

            var app = createApp({{
                apiKey: "{SHOPIFY_CLIENT_ID}",
                shopOrigin: "{shop}",
                forceRedirect: true
            }});
        </script>
          <style>
            body {{
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                background-color: #f4f4f4;
                margin: 0;
            }}

            .container {{
                width: 40%;
                background: white;
                padding-left: 20px;
                padding-right: 35px;
                padding-bottom: 10px;
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                text-align: center;
            }}

            .form-group {{
                margin-bottom: 15px;
            }}

            label {{
                font-weight: bold;
                display: block;
                margin-bottom: 5px;
            }}

            input {{
                width: 100%;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
                font-size: 16px;
            }}

            button {{
                background-color: #007bff;
                color: white;
                padding: 10px 15px;
                border: none;
                border-radius: 5px;
                font-size: 16px;
                cursor: pointer;
                margin-top: 10px;
            }}

            button:hover {{
                background-color: #0056b3;
            }}

            #message {{
                margin-top: 15px;
                padding: 10px;
                border-radius: 5px;
                display: none;
                font-weight: bold;
                font-size: 16px;
            }}

            .success {{
                background-color: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }}

            .error {{
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }}
        </style>
    </head>

    <body>
        <div class="container">
                <h2>Pricing settings</h2>
                <form id="settingsForm">
                    <div class="form-group">
                        <label>VAT (%):</label>
                        <input type="number" name="vat" value="{settings["vat"]}" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>PayPal Fees (%):</label>
                        <input type="number" name="paypal_fees" value="{settings["paypal_fees"]}" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Second PayPal Fees (¬£):</label>
                        <input type="number" name="second_paypal_fees" value="{settings["second_paypal_fees"]}" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Profit Margin (%):</label>
                        <input type="number" name="profit" value="{settings["profit"]}" step="0.01">
                    </div>
                    <button type="submit">Update</button>
                    <button id="downloadCSV" type="button">Download CSV</button>
                </form>
                <p id="message"></p>
            </div>
            

        <script>
                document.addEventListener("DOMContentLoaded", function() {{
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
                    var settingsForm = document.getElementById('settingsForm');
                    if (settingsForm) {{
                        settingsForm.addEventListener('submit', function(event) {{
                            event.preventDefault();
                            var formData = new FormData(this);
        
                            fetch('/update_settings', {{
                                method: 'POST',
                                body: formData
                            }})
                            .then(response => response.json())
                            .then(data => {{
                                let messageElement = document.getElementById('message');
                                if (messageElement) {{
                                    messageElement.innerText = data.message;
                                    messageElement.style.display = 'block';
                                    setTimeout(() => {{
                                        messageElement.style.display = 'none';
                                    }}, 3000);
                                }}
                            }})
                            .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
                        }});
                    }} else {{
                        console.error("‚ùå –§–æ—Ä–º–∞ 'settingsForm' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                    }}
        
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                        var downloadBtn = document.getElementById('downloadCSV');
                        if (downloadBtn) {{
                            downloadBtn.addEventListener('click', function(event) {{
                                event.preventDefault();
                                window.location.href = '/download_csv';
                            }});
                        }} else {{
                            console.error("‚ùå –ö–Ω–æ–ø–∫–∞ 'Download CSV' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                        }}
                }});
        </script>
    </body>
    </html>
    """)


# üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ PowerBody API
def fetch_powerbody_products():
    print("üîÑ –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ PowerBody API...")
    try:
        client = Client(WSDL_URL)
        session = client.service.login(USERNAME, PASSWORD)
        response = client.service.call(session, "dropshipping.getProductList", [])

        if isinstance(response, str):
            try:
                response = json.loads(response)
            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
                return []

        if not isinstance(response, list):
            return []

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(response)}")
        client.service.endSession(session)
        return response

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []


# üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Shopify API
def fetch_all_shopify_products(shop, access_token):
    print("üîÑ –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Shopify API...")
    shopify_url = f"https://{shop}/admin/api/2024-01/products.json"
    headers = {"Content-Type": "application/json", "X-Shopify-Access-Token": access_token}
    params = {"fields": "id,variants", "limit": 250}
    all_products = []

    while True:
        time.sleep(0.6)
        response = requests.get(shopify_url, headers=headers, params=params)

        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ Shopify API: {response.status_code} | {response.text}")
            break

        products = response.json().get("products", [])
        all_products.extend(products)
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}, –≤—Å–µ–≥–æ: {len(all_products)}")

        link_header = response.headers.get("Link")
        if link_header and 'rel="next"' in link_header:
            try:
                next_page_info = [l.split(";")[0].strip("<>") for l in link_header.split(",") if 'rel="next"' in l][0]
                params["page_info"] = next_page_info.split("page_info=")[1]
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ page_info: {e}")
                break
        else:
            break

    print(f"‚úÖ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Shopify: {len(all_products)}")
    return all_products


def calculate_final_price(base_price, vat, paypal_fees, second_paypal_fees, profit):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
    if base_price is None or base_price == 0:
        return None

    vat_amount = base_price * (vat / 100)
    paypal_fees_amount = base_price * (paypal_fees / 100)
    profit_amount = base_price * (profit / 100)

    final_price = base_price + vat_amount + paypal_fees_amount + second_paypal_fees + profit_amount
    return round(final_price, 2)


def make_request_with_retries(url, headers, data, method="PUT", max_retries=5):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ 429"""
    delay = 2
    for attempt in range(max_retries):
        response = requests.put(url, headers=headers, json=data) if method == "PUT" else requests.post(url,
                                                                                                       headers=headers,
                                                                                                       json=data)

        if response.status_code == 200:
            return response
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è Error 429 (Too Many Requests). Send request again {delay} sec...")
            time.sleep(delay)
            delay *= 2
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} | {response.text}")
            return response
    print("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞.")
    return response


def update_shopify_variant(shop, access_token, variant_id, inventory_item_id, new_price, new_quantity, sku):
    headers = {"Content-Type": "application/json", "X-Shopify-Access-Token": access_token}

    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º variant {variant_id} (SKU: {sku}): –¶–µ–Ω–∞ {new_price}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {new_quantity}")

    update_variant_url = f"https://{shop}/admin/api/2024-01/variants/{variant_id}.json"
    variant_data = {"variant": {"id": variant_id, "price": f"{new_price:.2f}"}}

    max_retries = 5
    delay = 2  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    for attempt in range(max_retries):
        response = requests.put(update_variant_url, headers=headers, json=variant_data)

        if response.status_code == 200:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è variant {variant_id} (SKU: {sku}): {new_price}")
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 (Too Many Requests) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã {sku}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Ä–∞–∑–∞
        else:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è variant {variant_id} (SKU: {sku}): {response.status_code} - {response.text}")
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    update_inventory_url = f"https://{shop}/admin/api/2024-01/inventory_levels/set.json"
    inventory_data = {"location_id": 85726363936, "inventory_item_id": inventory_item_id, "available": new_quantity}

    delay = 2  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

    for attempt in range(max_retries):
        response = requests.post(update_inventory_url, headers=headers, json=inventory_data)

        if response.status_code == 200:
            print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è variant {variant_id} (SKU: {sku}): {new_quantity}")
            break
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 (Too Many Requests) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {sku}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        else:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è variant {variant_id} (SKU: {sku}): {response.status_code} - {response.text}")
            break


def sync_products(shop):
    """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º CSV-–æ—Ç—á—ë—Ç–∞."""
    access_token = get_token(shop)
    if not access_token:
        print(f"‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–ª—è {shop} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")
        return

    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è {shop}...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_settings()
    vat = settings["vat"]
    paypal_fees = settings["paypal_fees"]
    second_paypal_fees = settings["second_paypal_fees"]
    profit = settings["profit"]

    powerbody_products = fetch_powerbody_products()
    shopify_products = fetch_all_shopify_products(shop, access_token)

    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É SKU ‚Üí (variant_id, inventory_item_id, old_price, old_quantity)
    shopify_sku_map = {
        v.get("sku"): (v["id"], v.get("inventory_item_id"), v.get("price"), v.get("inventory_quantity"))
        for p in shopify_products for v in p["variants"] if v.get("sku")
    }

    synced_count = 0
    csv_data = []

    for pb_product in powerbody_products:
        if not isinstance(pb_product, dict):
            continue

        sku = pb_product.get("sku")
        base_price = pb_product.get("retail_price", pb_product.get("price", "0.00"))
        new_quantity = pb_product.get("qty")

        if not sku or sku not in shopify_sku_map:
            continue

        try:
            base_price = float(base_price)
        except ValueError:
            continue

        variant_id, inventory_item_id, old_price, old_quantity = shopify_sku_map[sku]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        final_price = calculate_final_price(base_price, vat, paypal_fees, second_paypal_fees, profit)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
        csv_data.append([sku, base_price, old_price, old_quantity])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä
        if old_price != final_price or old_quantity != new_quantity:
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º SKU {sku}: –¶–µ–Ω–∞ API {base_price} ‚Üí Shopify {final_price}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {old_quantity} ‚Üí {new_quantity}")
            update_shopify_variant(shop, access_token, variant_id, inventory_item_id, final_price, new_quantity, sku)
            synced_count += 1

            # Shopify API –ª–∏–º–∏—Ç - –Ω–µ –±–æ–ª–µ–µ 2 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É, —Å—Ç–∞–≤–∏–º –∑–∞–¥–µ—Ä–∂–∫—É
            time.sleep(0.6)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV-–æ—Ç—á—ë—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    csv_filename = save_to_csv(csv_data)
    print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {synced_count}")
    return csv_filename  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ CSV


@app.route('/update_settings', methods=['POST'])
def update_settings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings = {
        "vat": float(request.form.get("vat", 20)),
        "paypal_fees": float(request.form.get("paypal_fees", 3)),
        "second_paypal_fees": float(request.form.get("second_paypal_fees", 0.20)),
        "profit": float(request.form.get("profit", 30))
    }
    save_settings(settings)
    return jsonify({"status": "success", "message": "‚úÖ Settings saved!"})


def load_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "r") as file:
            return json.load(file)
    else:
        default_settings = {"vat": 20.0, "paypal_fees": 3.0, "second_paypal_fees": 0.20, "profit": 30.0}
        save_settings(default_settings)
        return default_settings


def save_settings(settings):
    with open(SETTINGS_FILE, "w") as file:
        json.dump(settings, file, indent=4)

def save_to_csv(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º."""
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(CSV_DIR, f"sync_report_{timestamp}.csv")

    with open(filename, "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["SKU", "Price API", "Price Shopify", "Quantity"])  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerows(data)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏

    print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    return filename  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

def get_latest_csv():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª."""
    files = sorted(os.listdir(CSV_DIR), reverse=True)
    if files:
        return os.path.join(CSV_DIR, files[0])
    return None

@app.route("/download_csv")
def download_csv():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    latest_file = get_latest_csv()
    if not latest_file:
        return "‚ùå No CSV files available.", 404
    return send_file(latest_file, as_attachment=True)


# üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
def start_sync_for_shop(shop, access_token):
    job_id = f"sync_{shop}"
    existing_job = scheduler.get_job(job_id)

    if not existing_job:
        print(f"üïí –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {shop} –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")
        scheduler.add_job(sync_products, 'interval', minutes=60, args=[shop], id=job_id, replace_existing=True)



# üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
def schedule_sync():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –≤ Redis."""
    keys = redis_client.keys("shopify_token:*")  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    if not keys:
        print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ Redis.")
        return

    for key in keys:
        shop = key.split("shopify_token:")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        access_token = redis_client.get(key)

        if access_token:
            start_sync_for_shop(shop, access_token)
            print(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è {shop}")
        else:
            print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–ª—è {shop} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Redis.")




if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    schedule_sync()
    app.run(host='0.0.0.0', port=80, debug=False)